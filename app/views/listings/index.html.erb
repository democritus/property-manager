<%
# Hidden form containing params that are used to build path used in "action"
# parameter of form.
%>
<%= filter_form %>

<div id="listings-index-content">
  <h3 style="margin: 0 0 1em; line-height: 1.2em"><%= page_header %></h3>
  <% unless @listings.empty? %>
    <% paginated_section @listings do %>
      <% #= will_paginate @posts %>
      <% #= page_entries_info @listings %>
      <%= render :partial => "listing", :collection => @listings %>   
      <% #= will_paginate @posts %>
    <% end %>
  <% else %>
    <p>No listings found</p>
  <% end %>
</div>

<% content_for :extra_stylesheet_includes do %>
  <%= stylesheet_link_tag 'faux_column_right' %>
  <%= stylesheet_link_tag 'pagination' %>
  <%= stylesheet_link_tag 'listings' %>
  <%= stylesheet_link_tag 'listings_index' %>
<% end %>

<% content_for :extra_javascript_includes do %>
  <%= javascript_include_tag 'nested_menu' %>
<% end %>

<% content_for :right_margin do %>
  <div id="right_margin">
    <% content_for :title, index_title %>
    <div class="bold_link">
      <%= listing_type_toggle %>
    </div>
    <div id="filter_menu" class="nested_menu clearfix">
      <div class="button">
        <div><div>Filter</div></div>
      </div>
      <div class="submenu" style="display: none">
        <div class="menu_block clearfix">
          <div class="close_element"">X</div>
          <%= place_filter :country %>
          <%= place_filter :zone %>
          <%= place_filter :province %>
          <%= place_filter :market %>
          <%= place_filter :canton %>
          <%= place_filter :barrio %>
          <%= price_range_filter %>
        </div>
      </div>
    </div>
    <div id="order_menu" class="nested_menu">
      <div class="button">
        <div><div>Sort</div></div>
      </div>
      <div class="submenu" style="display: none">
        <div class="menu_block clearfix">
          <div class="close_element">X</div>
          <div class="menu_list">
            <h3>Sort by</h3>
            <ul>
              <%
              # TODO: fix ordering so sorts can be performed on fields from
              # associated tables
              order_by_items = [
                {
                  :label => 'Category',
                  :order => 'property_primary_category_name'
                },
                {
                  :label => 'Style',
                  :order => 'property_primary_style_name'
                },
                {
                  :label => 'Country',
                  :order => 'property_barrio_canton_province_country_name'
                },
                {
                  :label => 'Zone',
                  :order => 'property_barrio_canton_zone_name'
                },
                {
                  :label => 'Province',
                  :order => 'property_barrio_canton_province_name'
                },
                {
                  :label => 'Market',
                  :order => 'property_barrio_market_name'
                },
                {
                  :label => 'Barrio',
                  :order => 'property_barrio_name'
                },
                {
                  :label => 'Price',
                  :order => 'ask_amount'
                },
                {
                  :label => 'Bedrooms',
                  :order => 'property_bedroom_number'
                },
                {
                  :label => 'Construction size',
                  :order => 'property_construction_size'
                },
                {
                  :label => 'Land size',
                  :order => 'property_land_size'
                },
                {
                  :label => 'Ref id',
                  :order => 'id'
                },
                {
                  :label => 'Sold',
                  :order => 'sold'
                },
                {
                  :label => 'Date posted',
                  :order => 'publish_date'
                }
              ]
              %>
              <% order_by_items.each do |item| %>
                <%
                case item[:order]
                when 'sold', 'publish_date'
                  default_order_direction = 'desc'
                else
                  default_order_direction = 'asc'
                end
                if params[:order] != item[:order]
                  new_order_direction = default_order_direction
                else
                  case params[:order_dir].downcase
                  when 'desc'
                    new_order_direction = 'asc'
                  else
                    new_order_direction = 'desc'
                  end
                end
                %>
                <li><%= link_to( item[:label],
                  listings_options(
                    @search_params.merge(
                      :order => item[:order],
                      :order_dir => new_order_direction
                    )
                  )
                ) %></li>
              <% end %>
            </ul>
          </div>
          </div>
      </div>
    </div>
    <div class="menu_block clearfix">
      <%= bedroom_number_select %>
    </div>
    <div class="menu_block clearfix">
      <%= bathroom_number_select %>
    </div>
    <div class="menu_block clearfix">
      <%= feature_filter %>
    </div>
    <div class="menu_block clearfix">
      <%= category_filter %>
    </div>
    <div class="menu_block clearfix">
      <%= style_filter %>
    </div>
  </div>
<% end %>

<% javascript_tag do %>

  // Array of hashes containing key names and null equivalent values for
  // search parameters
  var params_map = <%= JAVASCRIPT_LISTING_PARAMS_MAP %>;

  // Hidden form key/value pairs used to construct path for "action" parameter
  // of form
  var form_params = $j('#filter_form').serializeArray();
  
  // Form values overwrite defaults
  params_map = mergeParamMapAndFormPairs(params_map, form_params);
  
  // Used to merge default values with form values so that a path containing
  // all the necessary parameters is submitted
  function mergeParamMapAndFormPairs(default_arr, arr) {
    for (i=0; i<=default_arr.length-1; i++) {
      for (j=0; j<=arr.length-1; j++) {
        if (default_arr[i].name == arr[j].name) {
          default_arr[i].value = arr[j].value;
        }
      }
    }
    return default_arr;
  }
  
  // Close menus if clicking anywhere outside their borders
  $j(document).ready(function() {
  
    // TODO: get these DRYer functions working and delete redundant functions
    $j('select.bedroom_select').change(function () {
      roomNumberSelect('bedroom');
    });
    
    $j('select.bathroom_select').change(function () {
      roomNumberSelect('bathroom');
    });
  
    //click dblclick mousedown mouseenter mouseleave
    $j('body').bind('click', detectEvent);
    function detectEvent(e) {
      $j('.submenu').hide();
    }
  
    $j('.close_element').click(function() {
      $j(this).parents('.submenu').hide();
    });
  
    $j('.submenu').click(function() {
      // Keep event from bubbling up to parents which would cause the menu to
      // close just by clicking inside the submen
      event.stopPropagation();
    });
    
    // TODO: finish moving javascript from inside HTML to here
    $j('.nested_menu').click(function(event){
      // Reset submenus to show condensed list with "more" link
      $j(this).find('.normal').hide();
      $j(this).find('.more').show();
      
      // Toggle submenus when clicking button
      $j(this).children('.submenu').toggle('fold');
      
      // Close other submenus
      $j(this).siblings('.nested_menu').children('.submenu').hide();
      
      // Keep event from bubbling up to body (clicking the body will close
      // all menus)
      event.stopPropagation();
    });
    
    // On form submit, send parameters as a path in form's action parameter
    $j('form.multiple_filter').submit(function() {
      // Get array with form values
      form_params = $j('#filter_form').serializeArray();
      path = '/<%= request_path_parts.first %>' +
        formParamsToPath(form_params);
      // Disable inputs so that nothing is sent as querystring
      $j('#filter_form').find(':input').attr('disabled', true);
      $j('#filter_form').attr('action', path);
      $j('#filter_form').submit();
      return false;
    });
  });
      
  // Convert parameters in form into an equivalent path (form's action
  // parameter is updated with this path)
  function formParamsToPath(arr) {
    values = [];
    for (i=0; i<=arr.length-1; i++) {
      values[i] = arr[i].value;
    }
    return escape('/' + values.join('/'));
  }
  
  // Update hidden form values based on checked fields
  function updateCheckedValues(src_id, trg_id) {
    src = '#' + src_id;
    trg = '#' + trg_id;
    checked = $j('input[name=' + $j(src).attr('name') + ']:checked');
    str = '';
    for (i=0; i<=checked.length-1; i++) {
      if (i>0) {
        str = str + ' ';
      }
      str = str + checked[i].value;
    }
    // If all options unchecked, set corresponding field's value to value
    // that is equivalent to null
    if (str == '') {
      for (i=0; i<=params_map.length-1; i++) {
        if (params_map[i]['name'] == trg_id) {
          str = params_map[i]['null_equivalent'];
          break;
        }
      }
    }
    $j(trg).val(str);
  }
  
  function roomNumberSelect(type) {
    var str = '';
    var values = [];
    selects = $j('select.' + type + '_select');
    for (i=0; i<=selects.length-1; i++) {
      values[i] = selects[i].value;
    }
    if (values[0] == '' || values[1] == '') {
      if (values[0] != '') {
        if (values[1] == '') {
          selects[1].value = 1;
        }
      } else {
        if (values[1] != '') {
          selects[1].value = '';
        }
      }
      // If room number not selected, set corresponding field's value to
      // null equivalent
      for (i=0; i<=params_map.length-1; i++) {
        if (params_map[i]['name'] == type + '_number') {      
          str = params_map[i]['null_equivalent'];
          break;
        }
      }
    }
    for (i=0; i<=selects.length-1; i++) {
      values[i] = selects[i].value;
    }
    if (values[0] != '' && values[1] != '') {
      str = values.join(' ') + ' ' + type + 's';
    }
    $j('#' + type + '_number').val(str);
  }
<% end %>
