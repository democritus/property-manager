class ListingsController < ApplicationController

  # GET /listings
  # GET /listings.xml
  def index
    @listings = Listing.all
    
    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @listings }
    end
  end

  # GET /listings/1
  # GET /listings/1.xml
  def show
    @listing = Listing.find(params[:id])

    # User might send information request
    @information_request = InformationRequest.new

    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @listing }
    end

  end

  # GET /listings/new
  # GET /listings/new.xml
  def new
    @property = context_object( :include => :listings )
    @listing = Listing.new
    
    # Data for lists
    set_form_list_data
    
    # Selected data for lists
    set_selected_data

    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @listing }
    end
  end

  # GET /listings/1/edit
  def edit
    # Enable nested behavior
    @property = context_object( :include => :listings )
    @listing = Listing.find(params[:id])
    
    # Pseudo attributes
    #@listing.primary_category_id = @listing.get_primary_category_id
    #@listing.primary_style_id = @listing.get_primary_style_id
    
    # Data for lists
    set_form_list_data
    
    # Selected data for lists
    set_selected_data
  end

  # POST /listings
  # POST /listings.xml
  def create
    # Enable nested behavior
    @property = context_object( :include => :listings )
    @listing = @property.listings.build( params[:listing] )
    
    respond_to do |format|
      if @listing.save
        flash[:notice] = 'Listing was successfully created.'
        format.html { redirect_to(property_url(@property)) }
        format.xml  { render :xml => @listing,
          :status => :created, :location => @listing }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @listing.errors,
          :status => :unprocessable_entity }
      end
    end
  end

  # PUT /listings/1
  # PUT /listings/1.xml
  def update
    @listing = Listing.find(params[:id])

    respond_to do |format|
      if @listing.update_attributes(params[:listing])
        flash[:notice] = 'Listing was successfully updated.'
        
        @property = context_object( :include => :listings )
        format.html { redirect_to(property_url(@property)) }
        
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @listing.errors,
          :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /listings/1
  # DELETE /listings/1.xml
  def destroy
    @listing = Listing.find(params[:id])
    @listing.destroy

    respond_to do |format|
      @property = context_object( :include => :listings )
      format.html { redirect_to(property_url(@property)) }
      format.xml  { head :ok }
    end
  end
  
  def set_form_list_data
    @lists = {}
    
    @lists[:agencies] = Agency.find(:all).map {
      |agency| [agency.name, agency.id.to_s] }
    listing_types = ListingType.find(:all,
      :include => { :feature_assignments => :feature }
    )
    @lists[:listing_types] = listing_types.map {
      |listing_type| [listing_type.name, listing_type.id.to_s] }
    @lists[:sale_features] = listing_types[0].features.map {
      |feature| [feature.name, feature.id.to_s] }
    @lists[:rent_features] = listing_types[1].features.map {
      |feature| [feature.name, feature.id.to_s] }
    @lists[:currencies] = Currency.find(:all).map {
      |currency| [currency.code + ' ' + currency.symbol, currency.id.to_s] }
    @lists[:categories] = Category.find(:all).map {
      |category| [category.name, category.id.to_s]
    }
    @lists[:categories_with_none] = @lists[:categories].dup.unshift(['None', ''])
    @lists[:features] = Feature.find(:all).map {
      |feature| [feature.name, feature.id.to_s]
    }
    @lists[:styles] = Style.find(:all).map {
      |style| [style.name, style.id.to_s]
    }
    @lists[:styles_with_none] = @lists[:styles].dup.unshift(['None', ''])
  end
  
  def set_selected_data
    @selected = {}
    @selected[:category_ids] = @listing.category_assignments.map {
      |category_assignment| category_assignment.category_id.to_s
    }
    @selected[:feature_ids] = @listing.feature_assignments.map {
      |feature_assignment| feature_assignment.feature_id.to_s
    }
    @selected[:style_ids] = @listing.style_assignments.map {
      |style_assignment| style_assignment.style_id.to_s
    }
  end
  
end
