# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base
  helper :all # include all helpers, all the time
  
  # 2009-03-04 - Brian Warren - Authologic stuff
  helper_method :current_user_session, :current_user
  filter_parameter_logging :password, :password_confirmation
  
  protect_from_forgery # See ActionController::RequestForgeryProtection for details

  # Scrub sensitive parameters from your log
  # filter_parameter_logging :password

  before_filter :set_locale

  
  #
  # Locale-related methods
  #
  # Get locale from TLD (last part of domain name) - easiest to implement and
  # best for search engines. Downside is you have to own this domain name
  def set_locale
    I18n.locale = extract_locale_from_tld
  end
  # Get locale from top-level domain or return nil if such locale is not available
  # You have to put something like:
  #   127.0.0.1 application.com
  #   127.0.0.1 application.it
  #   127.0.0.1 application.pl
  # in your /etc/hosts file to try this out locally
  def extract_locale_from_tld
    parsed_locale = request.host.split('.').last
    (I18n.available_locales.include? parsed_locale) ? parsed_locale  : nil
  end

  # Get locale from subdomain (first part of domain name) - easy to implement,
  # maybe not as ideal as getting from TLD. Downside is you have to set up
  # subdomains
  #def set_locale
  #  I18n.locale = extract_locale_from_tld
  #end
  # Get locale code from request subdomain (like http://it.application.local:3000)
  # You have to put something like:
  #   127.0.0.1 gr.application.local
  # in your /etc/hosts file to try this out locally
  #def extract_locale_from_subdomain
  #  parsed_locale = request.subdomains.first
  #  (available_locales.include? parsed_locale) ? parsed_locale  : nil
  #end

  # Tack locale onto the end of every URL's parameters - not the best way since
  # it doesn't respect conventional hierarchy (locale should be first),
  # is less readable, and isn't as good for search engines. It also breaks
  # Rails' auto-magic URL and resource ID has to be passed explicitly
  #def set_locale
  #  # if params[:locale] is nil then I18n.default_locale will be used
  #  I18n.locale = params[:locale]
  #end
  #def default_url_options(options={})
  #  logger.debug "default_url_options is passed options: #{options.inspect}\n"
  #  { :locale => I18n.locale }
  #end
  

  private
  
  # Handle nested actions
  def context_object( *finder_options )
    params[:context_type].classify.constantize.find( context_id, *finder_options )
  end
  
  def context_id
    params["#{ params[:context_type].singularize }_id"]
  end
  
  # Authlogic methods
  def current_user_session
    return @current_user_session if defined?(@current_user_session)
    @current_user_session = UserSession.find
  end

  def current_user
    return @current_user if defined?(@current_user)
    @current_user = current_user_session && current_user_session.user
  end
  
  def require_user
    unless current_user
      store_location
      flash[:notice] = "You must be logged in to access this page"
      redirect_to new_user_session_url
      return false
    end
  end

  def require_no_user
    if current_user
      store_location
      flash[:notice] = "You must be logged out to access this page"
      redirect_to account_url
      return false
    end
  end
  
  def store_location
    session[:return_to] = request.request_uri
  end
  
  def redirect_back_or_default(default)
    redirect_to(session[:return_to] || default)
    session[:return_to] = nil
  end
  
end
