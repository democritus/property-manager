class FeaturesController < ApplicationController
  # GET /features
  # GET /features.xml
  def index
    # Enable polymorphic behavior
    # ROUTES WAY
    @featureable = context_object( :include => :features )
    @features = @featureable.features
    
    # Values for selects, checkboxes, and radios
    @lists = form_list_data

    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @features }
    end
  end

  # GET /features/1
  # GET /features/1.xml
  def show
    @feature = Feature.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @feature }
    end
  end

  # GET /features/new
  # GET /features/new.xml
  def new
    @feature = Feature.new

    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @feature }
    end
  end

  # GET /features/1/edit
  def edit
    @feature = Feature.find(params[:id])
  end

  # POST /features
  # POST /features.xml
  def create
    # Enable polymorphic behavior
    @feature = context_object( :include => :features ).features.build(params[:feature])

    respond_to do |format|
      if @feature.save
        flash[:notice] = 'Feature was successfully created.'
        format.html { redirect_to :id => nil } # hack to redirect to parent index
        format.xml  { render :xml => @feature, :status => :created, :location => @feature }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @feature.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /features/1
  # PUT /features/1.xml
  def update
    @feature = Feature.find(params[:id])

    respond_to do |format|
      if @feature.update_attributes(params[:feature])
        flash[:notice] = 'Feature was successfully updated.'
        format.html { redirect_to(@feature) }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @feature.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /features/1
  # DELETE /features/1.xml
  def destroy
    @feature = Feature.find(params[:id])
    @feature.destroy

    respond_to do |format|
      format.html { redirect_to(features_url) }
      format.xml  { head :ok }
    end
  end
 
  
  private
  
  # Handle nested polymorphic actions
  def context_object( *finder_options )
    params[:context_type].classify.constantize.find( context_id, *finder_options )
  end
  
  def context_id
    params["#{ params[:context_type].singularize }_id"]
  end
  
  def form_list_data
    lists = {}
    lists[:feature_options] = FeatureOption.find(:all).map { 
      |feature_option| [feature_option.name, feature_option.id]
    }
    return lists
  end
  
end
