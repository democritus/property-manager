class FeatureAssignmentsController < ApplicationController
  # GET /feature_assignments
  # GET /feature_assignments.xml
  def index
    # Enable polymorphic behavior
    @feature_assignable = context_object( :include => :feature_assignments )
    @feature_assignments = @feature_assignable.feature_assignments
    
    # Data for lists
    set_form_list_data

    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @feature_assignments }
    end
  end

  # POST /feature_assignments
  # POST /feature_assignments.xml
  def create
    # Enable polymorphic behavior
    @feature_assignable = context_object( :include => :feature_assignments )
    @feature_assignment = @feature_assignable.feature_assignments.build(
      params[:feature_assignment] )

    respond_to do |format|
      if @feature_assignment.save
        flash[:notice] = 'FeatureAssignment was successfully created.'
        format.html { redirect_to(polymorphic_url([@feature_assignable,
          :feature_assignments])) }
        format.xml  { render :xml => @feature_assignment, :status => :created,
          :location => @feature_assignment }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @feature_assignment.errors,
          :status => :unprocessable_entity }
      end
    end
  end

  # PUT /feature_assignments/1
  # PUT /feature_assignments/1.xml
  def update
    @feature_assignment = FeatureAssignment.find(params[:id])

    respond_to do |format|
      if @feature_assignment.update_attributes(params[:feature_assignment])
        flash[:notice] = 'FeatureAssignment was successfully updated.'
        
        @feature_assignable = context_object( :include => :feature_assignments )
        format.html { redirect_to(polymorphic_url([@feature_assignable,
          :feature_assignments])) }
        
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @feature_assignment.errors,
          :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /feature_assignments/1
  # DELETE /feature_assignments/1.xml
  def destroy
    @feature_assignment = FeatureAssignment.find(params[:id])
    @feature_assignment.destroy
    
    respond_to do |format|
      @feature_assignable = context_object( :include => :feature_assignments )
      format.html { redirect_to(polymorphic_url([@feature_assignable,
        :feature_assignments])) }
      format.xml  { head :ok }
    end
  end
  
  
  private
  
  # Handle nested polymorphic actions
  def context_object( *finder_options )
    params[:context_type].classify.constantize.find( context_id, *finder_options )
  end
  
  def context_id
    params["#{ params[:context_type].singularize }_id"]
  end
  
  def form_list_data
    @lists = {}
    @lists[:features] = Feature.find(:all).map {
      |feature| [feature.name, feature.id]
    }
    # Remove from list records already associated with this assignable entity
    unless @feature_assignments.nil?
      feature_assignment_ids = @feature_assignments.map {
        |feature_assignment| feature_assignment.feature_id }
      unless feature_assignment_ids.blank?
        @lists[:features].delete_if {
         |pair| feature_assignment_ids.include?(pair[1]) }
      end
    end
  end
  
end
